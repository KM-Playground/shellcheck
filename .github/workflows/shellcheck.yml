name: Validate Shell Scripts on PR to master/release branch

# This workflow has two jobs:
# 1. 'evaluation' - Checks if the PR targets EITHER 'master' or 'release' branches
# 2. 'shell-lint' - Runs ShellCheck linting on modified shell scripts
#
# The workflow runs when:
# 1. A PR is opened, reopened, or synchronized (new commits pushed)
# 2. For the shell-lint job, the PR must target EITHER 'master' or 'release' branches
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
env:
  GH_TOKEN: ${{ github.token }}

jobs:
  evaluation:
    runs-on:
      ubuntu-latest
    # We will now run this workflow when the following conditions are met
    # 1. A PR is opened, reopened, or synchronized
    # 2. The PR targets either 'master' or 'release' branches
    outputs:
      should_run: ${{ steps.check_target.outputs.should_run }}
    steps:
      - name: Check target branch
        id: check_target
        run: |
          # Extract target branch name from PR event
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Target branch: $TARGET_BRANCH"

          # Check if target branch is main or release
          if [[ "$TARGET_BRANCH" == "main" || "$TARGET_BRANCH" == "release" ]]; then
            echo "Workflow will run"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "::Notice:: This workflow only runs for PRs targeting 'main' or 'release' branches."
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  shellscript-validation:
    needs: evaluation
    if: needs.evaluation.outputs.should_run == 'true'
    runs-on:
      ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      statuses: write
      checks: write

    steps:
      # Step 1: Check out the PR branch
      # For pull_request events, GitHub Actions automatically checks out the PR branch
      # This ensures we're testing the exact code that will be merged
      - name: Check out PR branch
        uses: actions/checkout@v4

      # Step 2: Set PR information from event context
      - name: Set PR information
        run: |
          echo "branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "target_branch_name=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR branch is ${{ github.event.pull_request.head.ref }}"
          echo "PR targeted at branch ${{ github.event.pull_request.base.ref }}"

      # Step 3: Generate the diff
      - name: Generate the diff
        run: |
          REPO="${{ github.repository }}"
          pr_number="${{ github.event.pull_request.number }}"
          # Use the GH CLI to get the diff via an api call
          # Use `tee` binary to save it to a file called full-changeset.txt
          # Use `sed` to remove off diff --git a/ from each of the lines (we are streaming the lines)
          # From the final output which could look like "src/main/java/App.java b/src/main/java/App.java"
          # get the first field using `cut` command

          # Run gh pr diff and capture output
          gh pr diff "$pr_number" | tee full-changeset.txt | sed -n 's/^diff --git a\///p' | cut -d' ' -f1 > changeset.txt

          # Check if full-changeset.txt has content
          if [ -s full-changeset.txt ]; then
            echo "Successfully retrieved diff using gh pr diff"
          else
            # The failure usually happens when the diff is very large and has 300+ files in it
            # So we need to handle those PRs via the API invocation mechanism.
            echo "gh pr diff failed, falling back to API method..."

            # Fetch PR file changes and save as JSON
            gh api "repos/$REPO/pulls/$pr_number/files" --paginate > full-changeset.json

            # Convert JSON response to a git diff-like format
            jq -r '.[] | "diff --git a/\(.filename) b/\(.filename)\n\(.patch)"' full-changeset.json > full-changeset.txt

            # Extract file names from JSON and store in changeset.txt
            jq -r '.[].filename' full-changeset.json > changeset.txt
          fi

          echo "Diff stored in full-changeset.txt"
          echo "File list stored in changeset.txt"

        # Step 4: Log Workflow run URL on PR
      - name: Log Workflow run URL on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --body "‚úÖ ShellCheck Job started. : [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Install reviewdog
        uses: reviewdog/action-setup@e04ffabe3898a0af8d0fb1af00c188831c4b5893
        with:
          reviewdog_version: v0.20.3

      - name: Setup python
        uses: actions/setup-python@v5
        # Setup python ONLY if we are NOT testing this workflow locally using ACT tool
        with:
          python-version: "3.13"

      # Step 7: Extract shell scripts and modified lines
      - name: Extract shell scripts and modified lines
        id: extract_shell_info
        run: |
          # Run combined Python script to extract shell scripts and their modified lines
          output=$(python3 .github/scripts/shellcheck/extract_shell_info.py changeset.txt full-changeset.txt)
          echo "$output"

          # Extract the has_shell_scripts value from the output
          if echo "$output" | grep -q "has_shell_scripts=true"; then
            echo "has_shell_scripts=true" >> $GITHUB_OUTPUT
          else
            echo "has_shell_scripts=false" >> $GITHUB_OUTPUT
          fi

      # Step 8: Run ShellCheck with diff-aware filtering and reviewdog
      - name: Run ShellCheck with diff-aware filtering
        if: ${{ steps.extract_shell_info.outputs.has_shell_scripts == 'true' }}
        id: run_shellcheck
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
          CI_PULL_REQUEST: ${{ github.event.pull_request.number }}
          CI_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}
          CI_REPO_OWNER: ${{ github.repository_owner }}
          CI_REPO_NAME: ${{ github.event.repository.name }}
          GITHUB_EVENT_NAME: pull_request
        run: |
          # Run Python script to execute ShellCheck with filtering
          output=$(python3 .github/scripts/shellcheck/run_shellcheck.py shell_scripts.txt modified_lines_map.txt)
          echo "$output"

          # Extract outputs for GitHub Actions
          total_issues=$(echo "$output" | grep "total_issues=" | cut -d= -f2)
          exit_code=$(echo "$output" | grep "exit_code=" | cut -d= -f2)

          echo "total_issues=$total_issues" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

          # Use reviewdog to post inline comments if there are issues (skip if running locally)
          if [[ -s shellcheck_diff_filtered.txt ]]; then
            cat shellcheck_diff_filtered.txt | reviewdog -f=gcc \
              -name="shellcheck" \
              -reporter=github-pr-review \
              -filter-mode=nofilter \
              -fail-on-error=false \
              -level=error
          fi

      # Step 9: Report ShellCheck summary
      - name: Report ShellCheck summary
        if: ${{ steps.extract_shell_info.outputs.has_shell_scripts == 'true' }}
        run: |
          if [[ -f shellcheck_results.txt && -s shellcheck_results.txt ]]; then
            echo "ShellCheck found the following issues:"
            echo "=================================="
            cat shellcheck_results.txt
            echo "=================================="

            # Post summary comment on PR (reviewdog already added inline comments)
            {
              echo "## üîç ShellCheck Summary"
              echo ""
              echo "ShellCheck found **${{ steps.run_shellcheck.outputs.total_issues }}** issue(s) on **modified lines** in the shell scripts."
              echo ""
              echo "üìù **Inline comments have been added to the specific lines with issues.**"
              echo ""
              echo "‚ÑπÔ∏è **Note**: Only issues on lines you modified are reported to keep the feedback focused and relevant."
              echo ""
              echo "Please fix these issues before merging. The build will fail until all non-trivial ShellCheck issues are resolved."
              echo ""
              echo "<details>"
              echo "<summary>Click to see all issues on modified lines</summary>"
              echo ""
              echo '```'
              echo ""
              cat shellcheck_results.txt
              echo ""
              echo '```'
              echo "</details>"
            } > shellcheck_comment.md

            gh pr comment ${{ github.event.pull_request.number }} \
              --repo ${{ github.repository }} \
              --body-file shellcheck_comment.md
          else
            echo "‚úÖ No ShellCheck issues found in modified shell scripts"

            # Post success comment
            gh pr comment ${{ github.event.pull_request.number }} \
              --repo ${{ github.repository }} \
              --body "‚úÖ **ShellCheck passed**: No issues found on modified lines in shell scripts. Inline code review completed successfully!"
          fi

      # Step 10: Fail build if issues found
      - name: Fail build if ShellCheck issues found
        if: ${{ steps.extract_shell_info.outputs.has_shell_scripts == 'true' && steps.run_shellcheck.outputs.exit_code == '1' }}
        run: |
          echo "‚ùå Build failed due to ShellCheck issues"
          echo "Please check the inline comments added by reviewdog on your PR"
          echo "Fix the issues reported and push your changes"
          exit 1


